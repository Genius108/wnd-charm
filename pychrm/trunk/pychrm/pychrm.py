# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pychrm', [dirname(__file__)])
        except ImportError:
            import _pychrm
            return _pychrm
        if fp is not None:
            try:
                _mod = imp.load_module('_pychrm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pychrm = swig_import_helper()
    del swig_import_helper
else:
    import _pychrm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


INF = _pychrm.INF
EPSILON = _pychrm.EPSILON
class RGBcolor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBcolor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBcolor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _pychrm.RGBcolor_r_set
    __swig_getmethods__["r"] = _pychrm.RGBcolor_r_get
    if _newclass:r = _swig_property(_pychrm.RGBcolor_r_get, _pychrm.RGBcolor_r_set)
    __swig_setmethods__["g"] = _pychrm.RGBcolor_g_set
    __swig_getmethods__["g"] = _pychrm.RGBcolor_g_get
    if _newclass:g = _swig_property(_pychrm.RGBcolor_g_get, _pychrm.RGBcolor_g_set)
    __swig_setmethods__["b"] = _pychrm.RGBcolor_b_set
    __swig_getmethods__["b"] = _pychrm.RGBcolor_b_get
    if _newclass:b = _swig_property(_pychrm.RGBcolor_b_get, _pychrm.RGBcolor_b_set)
    def __init__(self): 
        this = _pychrm.new_RGBcolor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_RGBcolor
    __del__ = lambda self : None;
RGBcolor_swigregister = _pychrm.RGBcolor_swigregister
RGBcolor_swigregister(RGBcolor)

class HSVcolor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSVcolor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSVcolor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _pychrm.HSVcolor_h_set
    __swig_getmethods__["h"] = _pychrm.HSVcolor_h_get
    if _newclass:h = _swig_property(_pychrm.HSVcolor_h_get, _pychrm.HSVcolor_h_set)
    __swig_setmethods__["s"] = _pychrm.HSVcolor_s_set
    __swig_getmethods__["s"] = _pychrm.HSVcolor_s_get
    if _newclass:s = _swig_property(_pychrm.HSVcolor_s_get, _pychrm.HSVcolor_s_set)
    __swig_setmethods__["v"] = _pychrm.HSVcolor_v_set
    __swig_getmethods__["v"] = _pychrm.HSVcolor_v_get
    if _newclass:v = _swig_property(_pychrm.HSVcolor_v_get, _pychrm.HSVcolor_v_set)
    def __init__(self): 
        this = _pychrm.new_HSVcolor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_HSVcolor
    __del__ = lambda self : None;
HSVcolor_swigregister = _pychrm.HSVcolor_swigregister
HSVcolor_swigregister(HSVcolor)

cmRGB = _pychrm.cmRGB
cmHSV = _pychrm.cmHSV
cmGRAY = _pychrm.cmGRAY
class rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pychrm.rect_x_set
    __swig_getmethods__["x"] = _pychrm.rect_x_get
    if _newclass:x = _swig_property(_pychrm.rect_x_get, _pychrm.rect_x_set)
    __swig_setmethods__["y"] = _pychrm.rect_y_set
    __swig_getmethods__["y"] = _pychrm.rect_y_get
    if _newclass:y = _swig_property(_pychrm.rect_y_get, _pychrm.rect_y_set)
    __swig_setmethods__["w"] = _pychrm.rect_w_set
    __swig_getmethods__["w"] = _pychrm.rect_w_get
    if _newclass:w = _swig_property(_pychrm.rect_w_get, _pychrm.rect_w_set)
    __swig_setmethods__["h"] = _pychrm.rect_h_set
    __swig_getmethods__["h"] = _pychrm.rect_h_get
    if _newclass:h = _swig_property(_pychrm.rect_h_get, _pychrm.rect_h_set)
    def __init__(self): 
        this = _pychrm.new_rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_rect
    __del__ = lambda self : None;
rect_swigregister = _pychrm.rect_swigregister
rect_swigregister(rect)


def compare_doubles(*args):
  return _pychrm.compare_doubles(*args)
compare_doubles = _pychrm.compare_doubles

def RGB2HSV(*args):
  return _pychrm.RGB2HSV(*args)
RGB2HSV = _pychrm.RGB2HSV

def HSV2RGB(*args):
  return _pychrm.HSV2RGB(*args)
HSV2RGB = _pychrm.HSV2RGB

def RGB2GRAY(*args):
  return _pychrm.RGB2GRAY(*args)
RGB2GRAY = _pychrm.RGB2GRAY
class ImageMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _pychrm.ImageMatrix_source_set
    __swig_getmethods__["source"] = _pychrm.ImageMatrix_source_get
    if _newclass:source = _swig_property(_pychrm.ImageMatrix_source_get, _pychrm.ImageMatrix_source_set)
    __swig_setmethods__["ColorMode"] = _pychrm.ImageMatrix_ColorMode_set
    __swig_getmethods__["ColorMode"] = _pychrm.ImageMatrix_ColorMode_get
    if _newclass:ColorMode = _swig_property(_pychrm.ImageMatrix_ColorMode_get, _pychrm.ImageMatrix_ColorMode_set)
    __swig_setmethods__["bits"] = _pychrm.ImageMatrix_bits_set
    __swig_getmethods__["bits"] = _pychrm.ImageMatrix_bits_get
    if _newclass:bits = _swig_property(_pychrm.ImageMatrix_bits_get, _pychrm.ImageMatrix_bits_set)
    __swig_setmethods__["width"] = _pychrm.ImageMatrix_width_set
    __swig_getmethods__["width"] = _pychrm.ImageMatrix_width_get
    if _newclass:width = _swig_property(_pychrm.ImageMatrix_width_get, _pychrm.ImageMatrix_width_set)
    __swig_setmethods__["height"] = _pychrm.ImageMatrix_height_set
    __swig_getmethods__["height"] = _pychrm.ImageMatrix_height_get
    if _newclass:height = _swig_property(_pychrm.ImageMatrix_height_get, _pychrm.ImageMatrix_height_set)
    __swig_setmethods__["stats"] = _pychrm.ImageMatrix_stats_set
    __swig_getmethods__["stats"] = _pychrm.ImageMatrix_stats_get
    if _newclass:stats = _swig_property(_pychrm.ImageMatrix_stats_get, _pychrm.ImageMatrix_stats_set)
    __swig_setmethods__["has_median"] = _pychrm.ImageMatrix_has_median_set
    __swig_getmethods__["has_median"] = _pychrm.ImageMatrix_has_median_get
    if _newclass:has_median = _swig_property(_pychrm.ImageMatrix_has_median_get, _pychrm.ImageMatrix_has_median_set)
    def WriteablePixels(self): return _pychrm.ImageMatrix_WriteablePixels(self)
    def WriteableColors(self): return _pychrm.ImageMatrix_WriteableColors(self)
    def ReadablePixels(self): return _pychrm.ImageMatrix_ReadablePixels(self)
    def ReadableColors(self): return _pychrm.ImageMatrix_ReadableColors(self)
    def ReadOnlyPixels(self): return _pychrm.ImageMatrix_ReadOnlyPixels(self)
    def ReadOnlyColors(self): return _pychrm.ImageMatrix_ReadOnlyColors(self)
    def WriteablePixelsFinish(self): return _pychrm.ImageMatrix_WriteablePixelsFinish(self)
    def WriteableColorsFinish(self): return _pychrm.ImageMatrix_WriteableColorsFinish(self)
    def LoadTIFF(self, *args): return _pychrm.ImageMatrix_LoadTIFF(self, *args)
    def SaveTiff(self, *args): return _pychrm.ImageMatrix_SaveTiff(self, *args)
    def OpenImage(self, *args): return _pychrm.ImageMatrix_OpenImage(self, *args)
    def init(self): return _pychrm.ImageMatrix_init(self)
    def remap_pix_plane(self, *args): return _pychrm.ImageMatrix_remap_pix_plane(self, *args)
    def remap_clr_plane(self, *args): return _pychrm.ImageMatrix_remap_clr_plane(self, *args)
    def allocate(self, *args): return _pychrm.ImageMatrix_allocate(self, *args)
    def copyFields(self, *args): return _pychrm.ImageMatrix_copyFields(self, *args)
    def copyData(self, *args): return _pychrm.ImageMatrix_copyData(self, *args)
    def copy(self, *args): return _pychrm.ImageMatrix_copy(self, *args)
    def submatrix(self, *args): return _pychrm.ImageMatrix_submatrix(self, *args)
    def __init__(self): 
        this = _pychrm.new_ImageMatrix()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_ImageMatrix
    __del__ = lambda self : None;
    def transform(self, *args): return _pychrm.ImageMatrix_transform(self, *args)
    def normalize(self, *args): return _pychrm.ImageMatrix_normalize(self, *args)
    def to8bits(self, *args): return _pychrm.ImageMatrix_to8bits(self, *args)
    def flipV(self): return _pychrm.ImageMatrix_flipV(self)
    def flipH(self): return _pychrm.ImageMatrix_flipH(self)
    def invert(self): return _pychrm.ImageMatrix_invert(self)
    def Downsample(self, *args): return _pychrm.ImageMatrix_Downsample(self, *args)
    def Rotate(self, *args): return _pychrm.ImageMatrix_Rotate(self, *args)
    def convolve(self, *args): return _pychrm.ImageMatrix_convolve(self, *args)
    def update_median(self): return _pychrm.ImageMatrix_update_median(self)
    def get_median(self): return _pychrm.ImageMatrix_get_median(self)
    def UpdateStats(self): return _pychrm.ImageMatrix_UpdateStats(self)
    def GetStats(self, *args): return _pychrm.ImageMatrix_GetStats(self, *args)
    def min(self): return _pychrm.ImageMatrix_min(self)
    def max(self): return _pychrm.ImageMatrix_max(self)
    def mean(self): return _pychrm.ImageMatrix_mean(self)
    def std(self): return _pychrm.ImageMatrix_std(self)
    def var(self): return _pychrm.ImageMatrix_var(self)
    def median(self): return _pychrm.ImageMatrix_median(self)
    def GetColorStatistics(self, *args): return _pychrm.ImageMatrix_GetColorStatistics(self, *args)
    def ColorTransform(self, *args): return _pychrm.ImageMatrix_ColorTransform(self, *args)
    def HueTransform(self, *args): return _pychrm.ImageMatrix_HueTransform(self, *args)
    def histogram(self, *args): return _pychrm.ImageMatrix_histogram(self, *args)
    def Otsu(self, dynamic_range=True): return _pychrm.ImageMatrix_Otsu(self, dynamic_range)
    def MultiScaleHistogram(self, *args): return _pychrm.ImageMatrix_MultiScaleHistogram(self, *args)
    def EdgeTransform(self, *args): return _pychrm.ImageMatrix_EdgeTransform(self, *args)
    def fft2(self, *args): return _pychrm.ImageMatrix_fft2(self, *args)
    def ChebyshevTransform(self, *args): return _pychrm.ImageMatrix_ChebyshevTransform(self, *args)
    def ChebyshevFourierTransform2D(self, *args): return _pychrm.ImageMatrix_ChebyshevFourierTransform2D(self, *args)
    def Symlet5Transform(self, *args): return _pychrm.ImageMatrix_Symlet5Transform(self, *args)
    def PrewittMagnitude2D(self, *args): return _pychrm.ImageMatrix_PrewittMagnitude2D(self, *args)
    def PrewittDirection2D(self, *args): return _pychrm.ImageMatrix_PrewittDirection2D(self, *args)
    def ChebyshevStatistics2D(self, *args): return _pychrm.ImageMatrix_ChebyshevStatistics2D(self, *args)
    def CombFirstFourMoments2D(self, *args): return _pychrm.ImageMatrix_CombFirstFourMoments2D(self, *args)
    def EdgeStatistics(self, *args): return _pychrm.ImageMatrix_EdgeStatistics(self, *args)
    def RadonTransform2D(self, *args): return _pychrm.ImageMatrix_RadonTransform2D(self, *args)
    def OtsuBinaryMaskTransform(self, *args): return _pychrm.ImageMatrix_OtsuBinaryMaskTransform(self, *args)
    def BWlabel(self, *args): return _pychrm.ImageMatrix_BWlabel(self, *args)
    def centroid(self, *args): return _pychrm.ImageMatrix_centroid(self, *args)
    def FeatureStatistics(self, *args): return _pychrm.ImageMatrix_FeatureStatistics(self, *args)
    def GaborFilters2D(self, *args): return _pychrm.ImageMatrix_GaborFilters2D(self, *args)
    def HaralickTexture2D(self, *args): return _pychrm.ImageMatrix_HaralickTexture2D(self, *args)
    def TamuraTexture2D(self, *args): return _pychrm.ImageMatrix_TamuraTexture2D(self, *args)
    def zernike2D(self, *args): return _pychrm.ImageMatrix_zernike2D(self, *args)
ImageMatrix_swigregister = _pychrm.ImageMatrix_swigregister
ImageMatrix_swigregister(ImageMatrix)

WC_UNINITIALIZED = _pychrm.WC_UNINITIALIZED
WC_NO_ERROR = _pychrm.WC_NO_ERROR
WC_IPP_NULL = _pychrm.WC_IPP_NULL
WC_MM_FAIL_RECURSIVE_CALL = _pychrm.WC_MM_FAIL_RECURSIVE_CALL
WC_TRANSFORM_FAIL = _pychrm.WC_TRANSFORM_FAIL
WC_EMPTY = _pychrm.WC_EMPTY
WC_NOT_IMPLEMENTED = _pychrm.WC_NOT_IMPLEMENTED
WC_INPUT_IMAGEMATRIX_NULL = _pychrm.WC_INPUT_IMAGEMATRIX_NULL

def catErrno():
  return _pychrm.catErrno()
catErrno = _pychrm.catErrno

def catError(*args):
  return _pychrm.catError(*args)
catError = _pychrm.catError

def showError(*args):
  return _pychrm.showError(*args)
showError = _pychrm.showError

def getErrorString():
  return _pychrm.getErrorString()
getErrorString = _pychrm.getErrorString

def translateError(*args):
  return _pychrm.translateError(*args)
translateError = _pychrm.translateError
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pychrm.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pychrm.SwigPyIterator_value(self)
    def incr(self, n=1): return _pychrm.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pychrm.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pychrm.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pychrm.SwigPyIterator_equal(self, *args)
    def copy(self): return _pychrm.SwigPyIterator_copy(self)
    def next(self): return _pychrm.SwigPyIterator_next(self)
    def __next__(self): return _pychrm.SwigPyIterator___next__(self)
    def previous(self): return _pychrm.SwigPyIterator_previous(self)
    def advance(self, *args): return _pychrm.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pychrm.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pychrm.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pychrm.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pychrm.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pychrm.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pychrm.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pychrm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)
cvar = _pychrm.cvar

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.DoubleVector___nonzero__(self)
    def __bool__(self): return _pychrm.DoubleVector___bool__(self)
    def __len__(self): return _pychrm.DoubleVector___len__(self)
    def pop(self): return _pychrm.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pychrm.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.DoubleVector_append(self, *args)
    def empty(self): return _pychrm.DoubleVector_empty(self)
    def size(self): return _pychrm.DoubleVector_size(self)
    def clear(self): return _pychrm.DoubleVector_clear(self)
    def swap(self, *args): return _pychrm.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pychrm.DoubleVector_get_allocator(self)
    def begin(self): return _pychrm.DoubleVector_begin(self)
    def end(self): return _pychrm.DoubleVector_end(self)
    def rbegin(self): return _pychrm.DoubleVector_rbegin(self)
    def rend(self): return _pychrm.DoubleVector_rend(self)
    def pop_back(self): return _pychrm.DoubleVector_pop_back(self)
    def erase(self, *args): return _pychrm.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.DoubleVector_push_back(self, *args)
    def front(self): return _pychrm.DoubleVector_front(self)
    def back(self): return _pychrm.DoubleVector_back(self)
    def assign(self, *args): return _pychrm.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pychrm.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pychrm.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.DoubleVector_reserve(self, *args)
    def capacity(self): return _pychrm.DoubleVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pychrm.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class ConstComputationTaskPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstComputationTaskPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstComputationTaskPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.ConstComputationTaskPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.ConstComputationTaskPtrVector___nonzero__(self)
    def __bool__(self): return _pychrm.ConstComputationTaskPtrVector___bool__(self)
    def __len__(self): return _pychrm.ConstComputationTaskPtrVector___len__(self)
    def pop(self): return _pychrm.ConstComputationTaskPtrVector_pop(self)
    def __getslice__(self, *args): return _pychrm.ConstComputationTaskPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.ConstComputationTaskPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.ConstComputationTaskPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.ConstComputationTaskPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.ConstComputationTaskPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.ConstComputationTaskPtrVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.ConstComputationTaskPtrVector_append(self, *args)
    def empty(self): return _pychrm.ConstComputationTaskPtrVector_empty(self)
    def size(self): return _pychrm.ConstComputationTaskPtrVector_size(self)
    def clear(self): return _pychrm.ConstComputationTaskPtrVector_clear(self)
    def swap(self, *args): return _pychrm.ConstComputationTaskPtrVector_swap(self, *args)
    def get_allocator(self): return _pychrm.ConstComputationTaskPtrVector_get_allocator(self)
    def begin(self): return _pychrm.ConstComputationTaskPtrVector_begin(self)
    def end(self): return _pychrm.ConstComputationTaskPtrVector_end(self)
    def rbegin(self): return _pychrm.ConstComputationTaskPtrVector_rbegin(self)
    def rend(self): return _pychrm.ConstComputationTaskPtrVector_rend(self)
    def pop_back(self): return _pychrm.ConstComputationTaskPtrVector_pop_back(self)
    def erase(self, *args): return _pychrm.ConstComputationTaskPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_ConstComputationTaskPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.ConstComputationTaskPtrVector_push_back(self, *args)
    def front(self): return _pychrm.ConstComputationTaskPtrVector_front(self)
    def back(self): return _pychrm.ConstComputationTaskPtrVector_back(self)
    def assign(self, *args): return _pychrm.ConstComputationTaskPtrVector_assign(self, *args)
    def resize(self, *args): return _pychrm.ConstComputationTaskPtrVector_resize(self, *args)
    def insert(self, *args): return _pychrm.ConstComputationTaskPtrVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.ConstComputationTaskPtrVector_reserve(self, *args)
    def capacity(self): return _pychrm.ConstComputationTaskPtrVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_ConstComputationTaskPtrVector
    __del__ = lambda self : None;
ConstComputationTaskPtrVector_swigregister = _pychrm.ConstComputationTaskPtrVector_swigregister
ConstComputationTaskPtrVector_swigregister(ConstComputationTaskPtrVector)

class ConstComputationTaskNodePtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstComputationTaskNodePtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstComputationTaskNodePtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.ConstComputationTaskNodePtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.ConstComputationTaskNodePtrVector___nonzero__(self)
    def __bool__(self): return _pychrm.ConstComputationTaskNodePtrVector___bool__(self)
    def __len__(self): return _pychrm.ConstComputationTaskNodePtrVector___len__(self)
    def pop(self): return _pychrm.ConstComputationTaskNodePtrVector_pop(self)
    def __getslice__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.ConstComputationTaskNodePtrVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_append(self, *args)
    def empty(self): return _pychrm.ConstComputationTaskNodePtrVector_empty(self)
    def size(self): return _pychrm.ConstComputationTaskNodePtrVector_size(self)
    def clear(self): return _pychrm.ConstComputationTaskNodePtrVector_clear(self)
    def swap(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_swap(self, *args)
    def get_allocator(self): return _pychrm.ConstComputationTaskNodePtrVector_get_allocator(self)
    def begin(self): return _pychrm.ConstComputationTaskNodePtrVector_begin(self)
    def end(self): return _pychrm.ConstComputationTaskNodePtrVector_end(self)
    def rbegin(self): return _pychrm.ConstComputationTaskNodePtrVector_rbegin(self)
    def rend(self): return _pychrm.ConstComputationTaskNodePtrVector_rend(self)
    def pop_back(self): return _pychrm.ConstComputationTaskNodePtrVector_pop_back(self)
    def erase(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_ConstComputationTaskNodePtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_push_back(self, *args)
    def front(self): return _pychrm.ConstComputationTaskNodePtrVector_front(self)
    def back(self): return _pychrm.ConstComputationTaskNodePtrVector_back(self)
    def assign(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_assign(self, *args)
    def resize(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_resize(self, *args)
    def insert(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.ConstComputationTaskNodePtrVector_reserve(self, *args)
    def capacity(self): return _pychrm.ConstComputationTaskNodePtrVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_ConstComputationTaskNodePtrVector
    __del__ = lambda self : None;
ConstComputationTaskNodePtrVector_swigregister = _pychrm.ConstComputationTaskNodePtrVector_swigregister
ConstComputationTaskNodePtrVector_swigregister(ConstComputationTaskNodePtrVector)

class ComputationTask(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputationTask, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputationTask, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    UnknownTaskType = _pychrm.ComputationTask_UnknownTaskType
    ImageTransformTask = _pychrm.ComputationTask_ImageTransformTask
    FeatureAlgorithmTask = _pychrm.ComputationTask_FeatureAlgorithmTask
    __swig_setmethods__["name"] = _pychrm.ComputationTask_name_set
    __swig_getmethods__["name"] = _pychrm.ComputationTask_name_get
    if _newclass:name = _swig_property(_pychrm.ComputationTask_name_get, _pychrm.ComputationTask_name_set)
    __swig_setmethods__["type"] = _pychrm.ComputationTask_type_set
    __swig_getmethods__["type"] = _pychrm.ComputationTask_type_get
    if _newclass:type = _swig_property(_pychrm.ComputationTask_type_get, _pychrm.ComputationTask_type_set)
    def register_task(self): return _pychrm.ComputationTask_register_task(self)
    def print_info(self): return _pychrm.ComputationTask_print_info(self)
    __swig_getmethods__["typeLabels"] = lambda x: _pychrm.ComputationTask_typeLabels
    if _newclass:typeLabels = staticmethod(_pychrm.ComputationTask_typeLabels)
    def typeLabel(self): return _pychrm.ComputationTask_typeLabel(self)
    __swig_destroy__ = _pychrm.delete_ComputationTask
    __del__ = lambda self : None;
ComputationTask_swigregister = _pychrm.ComputationTask_swigregister
ComputationTask_swigregister(ComputationTask)

def ComputationTask_typeLabels(*args):
  return _pychrm.ComputationTask_typeLabels(*args)
ComputationTask_typeLabels = _pychrm.ComputationTask_typeLabels

class ComputationTaskInstances(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputationTaskInstances, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputationTaskInstances, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["initialized"] = lambda x: _pychrm.ComputationTaskInstances_initialized
    if _newclass:initialized = staticmethod(_pychrm.ComputationTaskInstances_initialized)
    __swig_getmethods__["add"] = lambda x: _pychrm.ComputationTaskInstances_add
    if _newclass:add = staticmethod(_pychrm.ComputationTaskInstances_add)
    __swig_getmethods__["getInstances"] = lambda x: _pychrm.ComputationTaskInstances_getInstances
    if _newclass:getInstances = staticmethod(_pychrm.ComputationTaskInstances_getInstances)
    __swig_destroy__ = _pychrm.delete_ComputationTaskInstances
    __del__ = lambda self : None;
ComputationTaskInstances_swigregister = _pychrm.ComputationTaskInstances_swigregister
ComputationTaskInstances_swigregister(ComputationTaskInstances)

def ComputationTaskInstances_initialized():
  return _pychrm.ComputationTaskInstances_initialized()
ComputationTaskInstances_initialized = _pychrm.ComputationTaskInstances_initialized

def ComputationTaskInstances_add(*args):
  return _pychrm.ComputationTaskInstances_add(*args)
ComputationTaskInstances_add = _pychrm.ComputationTaskInstances_add

def ComputationTaskInstances_getInstances():
  return _pychrm.ComputationTaskInstances_getInstances()
ComputationTaskInstances_getInstances = _pychrm.ComputationTaskInstances_getInstances

class ComputationTaskNode(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputationTaskNode, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputationTaskNode, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source_task"] = _pychrm.ComputationTaskNode_source_task_set
    __swig_getmethods__["source_task"] = _pychrm.ComputationTaskNode_source_task_get
    if _newclass:source_task = _swig_property(_pychrm.ComputationTaskNode_source_task_get, _pychrm.ComputationTaskNode_source_task_set)
    __swig_setmethods__["task"] = _pychrm.ComputationTaskNode_task_set
    __swig_getmethods__["task"] = _pychrm.ComputationTaskNode_task_get
    if _newclass:task = _swig_property(_pychrm.ComputationTaskNode_task_get, _pychrm.ComputationTaskNode_task_set)
    __swig_setmethods__["name"] = _pychrm.ComputationTaskNode_name_set
    __swig_getmethods__["name"] = _pychrm.ComputationTaskNode_name_get
    if _newclass:name = _swig_property(_pychrm.ComputationTaskNode_name_get, _pychrm.ComputationTaskNode_name_set)
    __swig_setmethods__["node_key"] = _pychrm.ComputationTaskNode_node_key_set
    __swig_getmethods__["node_key"] = _pychrm.ComputationTaskNode_node_key_get
    if _newclass:node_key = _swig_property(_pychrm.ComputationTaskNode_node_key_get, _pychrm.ComputationTaskNode_node_key_set)
    __swig_setmethods__["num_dependent_nodes"] = _pychrm.ComputationTaskNode_num_dependent_nodes_set
    __swig_getmethods__["num_dependent_nodes"] = _pychrm.ComputationTaskNode_num_dependent_nodes_get
    if _newclass:num_dependent_nodes = _swig_property(_pychrm.ComputationTaskNode_num_dependent_nodes_get, _pychrm.ComputationTaskNode_num_dependent_nodes_set)
    __swig_setmethods__["depth"] = _pychrm.ComputationTaskNode_depth_set
    __swig_getmethods__["depth"] = _pychrm.ComputationTaskNode_depth_get
    if _newclass:depth = _swig_property(_pychrm.ComputationTaskNode_depth_get, _pychrm.ComputationTaskNode_depth_set)
    __swig_setmethods__["dependent_tasks"] = _pychrm.ComputationTaskNode_dependent_tasks_set
    __swig_getmethods__["dependent_tasks"] = _pychrm.ComputationTaskNode_dependent_tasks_get
    if _newclass:dependent_tasks = _swig_property(_pychrm.ComputationTaskNode_dependent_tasks_get, _pychrm.ComputationTaskNode_dependent_tasks_set)
    def print_info(self): return _pychrm.ComputationTaskNode_print_info(self)
    def get_num_dependent_nodes(self): return _pychrm.ComputationTaskNode_get_num_dependent_nodes(self)
    def __init__(self, *args): 
        this = _pychrm.new_ComputationTaskNode(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_ComputationTaskNode
    __del__ = lambda self : None;
ComputationTaskNode_swigregister = _pychrm.ComputationTaskNode_swigregister
ComputationTaskNode_swigregister(ComputationTaskNode)

class ComputationPlan(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputationPlan, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputationPlan, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.ComputationPlan_name_set
    __swig_getmethods__["name"] = _pychrm.ComputationPlan_name_get
    if _newclass:name = _swig_property(_pychrm.ComputationPlan_name_get, _pychrm.ComputationPlan_name_set)
    __swig_setmethods__["root"] = _pychrm.ComputationPlan_root_set
    __swig_getmethods__["root"] = _pychrm.ComputationPlan_root_get
    if _newclass:root = _swig_property(_pychrm.ComputationPlan_root_get, _pychrm.ComputationPlan_root_set)
    def add(self, *args): return _pychrm.ComputationPlan_add(self, *args)
    def add_get_node(self, *args): return _pychrm.ComputationPlan_add_get_node(self, *args)
    def finalize(self): return _pychrm.ComputationPlan_finalize(self)
    def isFinalized(self): return _pychrm.ComputationPlan_isFinalized(self)
    __swig_destroy__ = _pychrm.delete_ComputationPlan
    __del__ = lambda self : None;
ComputationPlan_swigregister = _pychrm.ComputationPlan_swigregister
ComputationPlan_swigregister(ComputationPlan)

class ComputationPlanExecutor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ComputationPlanExecutor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ComputationPlanExecutor, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["plan"] = _pychrm.ComputationPlanExecutor_plan_set
    __swig_getmethods__["plan"] = _pychrm.ComputationPlanExecutor_plan_get
    if _newclass:plan = _swig_property(_pychrm.ComputationPlanExecutor_plan_get, _pychrm.ComputationPlanExecutor_plan_set)
    def get_next_executable_node(self): return _pychrm.ComputationPlanExecutor_get_next_executable_node(self)
    def run(self): return _pychrm.ComputationPlanExecutor_run(self)
    def finish_node_execution(self, *args): return _pychrm.ComputationPlanExecutor_finish_node_execution(self, *args)
    def make_dependencies_executable(self, *args): return _pychrm.ComputationPlanExecutor_make_dependencies_executable(self, *args)
    __swig_destroy__ = _pychrm.delete_ComputationPlanExecutor
    __del__ = lambda self : None;
ComputationPlanExecutor_swigregister = _pychrm.ComputationPlanExecutor_swigregister
ComputationPlanExecutor_swigregister(ComputationPlanExecutor)

CURRENT_FEATURE_VERSION = _pychrm.CURRENT_FEATURE_VERSION
class FeatureComputationPlan(ComputationPlan):
    __swig_setmethods__ = {}
    for _s in [ComputationPlan]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureComputationPlan, name, value)
    __swig_getmethods__ = {}
    for _s in [ComputationPlan]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureComputationPlan, name)
    __repr__ = _swig_repr
    __swig_setmethods__["n_features"] = _pychrm.FeatureComputationPlan_n_features_set
    __swig_getmethods__["n_features"] = _pychrm.FeatureComputationPlan_n_features_get
    if _newclass:n_features = _swig_property(_pychrm.FeatureComputationPlan_n_features_get, _pychrm.FeatureComputationPlan_n_features_set)
    __swig_setmethods__["feature_vec_type"] = _pychrm.FeatureComputationPlan_feature_vec_type_set
    __swig_getmethods__["feature_vec_type"] = _pychrm.FeatureComputationPlan_feature_vec_type_get
    if _newclass:feature_vec_type = _swig_property(_pychrm.FeatureComputationPlan_feature_vec_type_get, _pychrm.FeatureComputationPlan_feature_vec_type_set)
    def add(self, *args): return _pychrm.FeatureComputationPlan_add(self, *args)
    def getFGoffset(self, *args): return _pychrm.FeatureComputationPlan_getFGoffset(self, *args)
    def getFeatureNameByIndex(self, *args): return _pychrm.FeatureComputationPlan_getFeatureNameByIndex(self, *args)
    def getFeatureGroupByIndex(self, *args): return _pychrm.FeatureComputationPlan_getFeatureGroupByIndex(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_FeatureComputationPlan(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_FeatureComputationPlan
    __del__ = lambda self : None;
FeatureComputationPlan_swigregister = _pychrm.FeatureComputationPlan_swigregister
FeatureComputationPlan_swigregister(FeatureComputationPlan)

class FeatureComputationPlanExecutor(ComputationPlanExecutor):
    __swig_setmethods__ = {}
    for _s in [ComputationPlanExecutor]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureComputationPlanExecutor, name, value)
    __swig_getmethods__ = {}
    for _s in [ComputationPlanExecutor]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureComputationPlanExecutor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["plan"] = _pychrm.FeatureComputationPlanExecutor_plan_set
    __swig_getmethods__["plan"] = _pychrm.FeatureComputationPlanExecutor_plan_get
    if _newclass:plan = _swig_property(_pychrm.FeatureComputationPlanExecutor_plan_get, _pychrm.FeatureComputationPlanExecutor_plan_set)
    __swig_setmethods__["feature_mat"] = _pychrm.FeatureComputationPlanExecutor_feature_mat_set
    __swig_getmethods__["feature_mat"] = _pychrm.FeatureComputationPlanExecutor_feature_mat_get
    if _newclass:feature_mat = _swig_property(_pychrm.FeatureComputationPlanExecutor_feature_mat_get, _pychrm.FeatureComputationPlanExecutor_feature_mat_set)
    __swig_setmethods__["current_feature_mat_row"] = _pychrm.FeatureComputationPlanExecutor_current_feature_mat_row_set
    __swig_getmethods__["current_feature_mat_row"] = _pychrm.FeatureComputationPlanExecutor_current_feature_mat_row_get
    if _newclass:current_feature_mat_row = _swig_property(_pychrm.FeatureComputationPlanExecutor_current_feature_mat_row_get, _pychrm.FeatureComputationPlanExecutor_current_feature_mat_row_set)
    def finish_node_execution(self, *args): return _pychrm.FeatureComputationPlanExecutor_finish_node_execution(self, *args)
    def run(self, *args): return _pychrm.FeatureComputationPlanExecutor_run(self, *args)
    __swig_destroy__ = _pychrm.delete_FeatureComputationPlanExecutor
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _pychrm.new_FeatureComputationPlanExecutor(*args)
        try: self.this.append(this)
        except: self.this = this
FeatureComputationPlanExecutor_swigregister = _pychrm.FeatureComputationPlanExecutor_swigregister
FeatureComputationPlanExecutor_swigregister(FeatureComputationPlanExecutor)

class StdFeatureComputationPlans(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, StdFeatureComputationPlans, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, StdFeatureComputationPlans, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    fv_unknown = _pychrm.StdFeatureComputationPlans_fv_unknown
    fv_short = _pychrm.StdFeatureComputationPlans_fv_short
    fv_long = _pychrm.StdFeatureComputationPlans_fv_long
    fv_short_color = _pychrm.StdFeatureComputationPlans_fv_short_color
    fv_long_color = _pychrm.StdFeatureComputationPlans_fv_long_color
    __swig_getmethods__["getFeatureSet"] = lambda x: _pychrm.StdFeatureComputationPlans_getFeatureSet
    if _newclass:getFeatureSet = staticmethod(_pychrm.StdFeatureComputationPlans_getFeatureSet)
    __swig_getmethods__["getFeatureSetColor"] = lambda x: _pychrm.StdFeatureComputationPlans_getFeatureSetColor
    if _newclass:getFeatureSetColor = staticmethod(_pychrm.StdFeatureComputationPlans_getFeatureSetColor)
    __swig_getmethods__["getFeatureSetLong"] = lambda x: _pychrm.StdFeatureComputationPlans_getFeatureSetLong
    if _newclass:getFeatureSetLong = staticmethod(_pychrm.StdFeatureComputationPlans_getFeatureSetLong)
    __swig_getmethods__["getFeatureSetLongColor"] = lambda x: _pychrm.StdFeatureComputationPlans_getFeatureSetLongColor
    if _newclass:getFeatureSetLongColor = staticmethod(_pychrm.StdFeatureComputationPlans_getFeatureSetLongColor)
    __swig_getmethods__["addLongFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addLongFeatures
    if _newclass:addLongFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addLongFeatures)
    __swig_getmethods__["addGroupAFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addGroupAFeatures
    if _newclass:addGroupAFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addGroupAFeatures)
    __swig_getmethods__["addGroupBFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addGroupBFeatures
    if _newclass:addGroupBFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addGroupBFeatures)
    __swig_getmethods__["addGroupCFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addGroupCFeatures
    if _newclass:addGroupCFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addGroupCFeatures)
    __swig_getmethods__["addColorFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addColorFeatures
    if _newclass:addColorFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addColorFeatures)
    __swig_getmethods__["addStdFeatures"] = lambda x: _pychrm.StdFeatureComputationPlans_addStdFeatures
    if _newclass:addStdFeatures = staticmethod(_pychrm.StdFeatureComputationPlans_addStdFeatures)
    __swig_destroy__ = _pychrm.delete_StdFeatureComputationPlans
    __del__ = lambda self : None;
StdFeatureComputationPlans_swigregister = _pychrm.StdFeatureComputationPlans_swigregister
StdFeatureComputationPlans_swigregister(StdFeatureComputationPlans)

def StdFeatureComputationPlans_getFeatureSet():
  return _pychrm.StdFeatureComputationPlans_getFeatureSet()
StdFeatureComputationPlans_getFeatureSet = _pychrm.StdFeatureComputationPlans_getFeatureSet

def StdFeatureComputationPlans_getFeatureSetColor():
  return _pychrm.StdFeatureComputationPlans_getFeatureSetColor()
StdFeatureComputationPlans_getFeatureSetColor = _pychrm.StdFeatureComputationPlans_getFeatureSetColor

def StdFeatureComputationPlans_getFeatureSetLong():
  return _pychrm.StdFeatureComputationPlans_getFeatureSetLong()
StdFeatureComputationPlans_getFeatureSetLong = _pychrm.StdFeatureComputationPlans_getFeatureSetLong

def StdFeatureComputationPlans_getFeatureSetLongColor():
  return _pychrm.StdFeatureComputationPlans_getFeatureSetLongColor()
StdFeatureComputationPlans_getFeatureSetLongColor = _pychrm.StdFeatureComputationPlans_getFeatureSetLongColor

def StdFeatureComputationPlans_addLongFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addLongFeatures(*args)
StdFeatureComputationPlans_addLongFeatures = _pychrm.StdFeatureComputationPlans_addLongFeatures

def StdFeatureComputationPlans_addGroupAFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addGroupAFeatures(*args)
StdFeatureComputationPlans_addGroupAFeatures = _pychrm.StdFeatureComputationPlans_addGroupAFeatures

def StdFeatureComputationPlans_addGroupBFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addGroupBFeatures(*args)
StdFeatureComputationPlans_addGroupBFeatures = _pychrm.StdFeatureComputationPlans_addGroupBFeatures

def StdFeatureComputationPlans_addGroupCFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addGroupCFeatures(*args)
StdFeatureComputationPlans_addGroupCFeatures = _pychrm.StdFeatureComputationPlans_addGroupCFeatures

def StdFeatureComputationPlans_addColorFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addColorFeatures(*args)
StdFeatureComputationPlans_addColorFeatures = _pychrm.StdFeatureComputationPlans_addColorFeatures

def StdFeatureComputationPlans_addStdFeatures(*args):
  return _pychrm.StdFeatureComputationPlans_addStdFeatures(*args)
StdFeatureComputationPlans_addStdFeatures = _pychrm.StdFeatureComputationPlans_addStdFeatures

class ConstImageTransformPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstImageTransformPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstImageTransformPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.ConstImageTransformPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.ConstImageTransformPtrVector___nonzero__(self)
    def __bool__(self): return _pychrm.ConstImageTransformPtrVector___bool__(self)
    def __len__(self): return _pychrm.ConstImageTransformPtrVector___len__(self)
    def pop(self): return _pychrm.ConstImageTransformPtrVector_pop(self)
    def __getslice__(self, *args): return _pychrm.ConstImageTransformPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.ConstImageTransformPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.ConstImageTransformPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.ConstImageTransformPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.ConstImageTransformPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.ConstImageTransformPtrVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.ConstImageTransformPtrVector_append(self, *args)
    def empty(self): return _pychrm.ConstImageTransformPtrVector_empty(self)
    def size(self): return _pychrm.ConstImageTransformPtrVector_size(self)
    def clear(self): return _pychrm.ConstImageTransformPtrVector_clear(self)
    def swap(self, *args): return _pychrm.ConstImageTransformPtrVector_swap(self, *args)
    def get_allocator(self): return _pychrm.ConstImageTransformPtrVector_get_allocator(self)
    def begin(self): return _pychrm.ConstImageTransformPtrVector_begin(self)
    def end(self): return _pychrm.ConstImageTransformPtrVector_end(self)
    def rbegin(self): return _pychrm.ConstImageTransformPtrVector_rbegin(self)
    def rend(self): return _pychrm.ConstImageTransformPtrVector_rend(self)
    def pop_back(self): return _pychrm.ConstImageTransformPtrVector_pop_back(self)
    def erase(self, *args): return _pychrm.ConstImageTransformPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_ConstImageTransformPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.ConstImageTransformPtrVector_push_back(self, *args)
    def front(self): return _pychrm.ConstImageTransformPtrVector_front(self)
    def back(self): return _pychrm.ConstImageTransformPtrVector_back(self)
    def assign(self, *args): return _pychrm.ConstImageTransformPtrVector_assign(self, *args)
    def resize(self, *args): return _pychrm.ConstImageTransformPtrVector_resize(self, *args)
    def insert(self, *args): return _pychrm.ConstImageTransformPtrVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.ConstImageTransformPtrVector_reserve(self, *args)
    def capacity(self): return _pychrm.ConstImageTransformPtrVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_ConstImageTransformPtrVector
    __del__ = lambda self : None;
ConstImageTransformPtrVector_swigregister = _pychrm.ConstImageTransformPtrVector_swigregister
ConstImageTransformPtrVector_swigregister(ConstImageTransformPtrVector)

class ConstFeatureGroupPtrVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ConstFeatureGroupPtrVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ConstFeatureGroupPtrVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.ConstFeatureGroupPtrVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.ConstFeatureGroupPtrVector___nonzero__(self)
    def __bool__(self): return _pychrm.ConstFeatureGroupPtrVector___bool__(self)
    def __len__(self): return _pychrm.ConstFeatureGroupPtrVector___len__(self)
    def pop(self): return _pychrm.ConstFeatureGroupPtrVector_pop(self)
    def __getslice__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.ConstFeatureGroupPtrVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.ConstFeatureGroupPtrVector_append(self, *args)
    def empty(self): return _pychrm.ConstFeatureGroupPtrVector_empty(self)
    def size(self): return _pychrm.ConstFeatureGroupPtrVector_size(self)
    def clear(self): return _pychrm.ConstFeatureGroupPtrVector_clear(self)
    def swap(self, *args): return _pychrm.ConstFeatureGroupPtrVector_swap(self, *args)
    def get_allocator(self): return _pychrm.ConstFeatureGroupPtrVector_get_allocator(self)
    def begin(self): return _pychrm.ConstFeatureGroupPtrVector_begin(self)
    def end(self): return _pychrm.ConstFeatureGroupPtrVector_end(self)
    def rbegin(self): return _pychrm.ConstFeatureGroupPtrVector_rbegin(self)
    def rend(self): return _pychrm.ConstFeatureGroupPtrVector_rend(self)
    def pop_back(self): return _pychrm.ConstFeatureGroupPtrVector_pop_back(self)
    def erase(self, *args): return _pychrm.ConstFeatureGroupPtrVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_ConstFeatureGroupPtrVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.ConstFeatureGroupPtrVector_push_back(self, *args)
    def front(self): return _pychrm.ConstFeatureGroupPtrVector_front(self)
    def back(self): return _pychrm.ConstFeatureGroupPtrVector_back(self)
    def assign(self, *args): return _pychrm.ConstFeatureGroupPtrVector_assign(self, *args)
    def resize(self, *args): return _pychrm.ConstFeatureGroupPtrVector_resize(self, *args)
    def insert(self, *args): return _pychrm.ConstFeatureGroupPtrVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.ConstFeatureGroupPtrVector_reserve(self, *args)
    def capacity(self): return _pychrm.ConstFeatureGroupPtrVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_ConstFeatureGroupPtrVector
    __del__ = lambda self : None;
ConstFeatureGroupPtrVector_swigregister = _pychrm.ConstFeatureGroupPtrVector_swigregister
ConstFeatureGroupPtrVector_swigregister(ConstFeatureGroupPtrVector)

class Channel(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Channel, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Channel, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.Channel_name_set
    __swig_getmethods__["name"] = _pychrm.Channel_name_get
    if _newclass:name = _swig_property(_pychrm.Channel_name_get, _pychrm.Channel_name_set)
    def __init__(self, *args): 
        this = _pychrm.new_Channel(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_Channel
    __del__ = lambda self : None;
Channel_swigregister = _pychrm.Channel_swigregister
Channel_swigregister(Channel)

class FeatureGroup(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureGroup, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureGroup, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.FeatureGroup_name_set
    __swig_getmethods__["name"] = _pychrm.FeatureGroup_name_get
    if _newclass:name = _swig_property(_pychrm.FeatureGroup_name_get, _pychrm.FeatureGroup_name_set)
    __swig_setmethods__["algorithm"] = _pychrm.FeatureGroup_algorithm_set
    __swig_getmethods__["algorithm"] = _pychrm.FeatureGroup_algorithm_get
    if _newclass:algorithm = _swig_property(_pychrm.FeatureGroup_algorithm_get, _pychrm.FeatureGroup_algorithm_set)
    __swig_setmethods__["channel"] = _pychrm.FeatureGroup_channel_set
    __swig_getmethods__["channel"] = _pychrm.FeatureGroup_channel_get
    if _newclass:channel = _swig_property(_pychrm.FeatureGroup_channel_get, _pychrm.FeatureGroup_channel_set)
    __swig_setmethods__["transforms"] = _pychrm.FeatureGroup_transforms_set
    __swig_getmethods__["transforms"] = _pychrm.FeatureGroup_transforms_get
    if _newclass:transforms = _swig_property(_pychrm.FeatureGroup_transforms_get, _pychrm.FeatureGroup_transforms_set)
    __swig_setmethods__["labels"] = _pychrm.FeatureGroup_labels_set
    __swig_getmethods__["labels"] = _pychrm.FeatureGroup_labels_get
    if _newclass:labels = _swig_property(_pychrm.FeatureGroup_labels_get, _pychrm.FeatureGroup_labels_set)
    def __init__(self, *args): 
        this = _pychrm.new_FeatureGroup(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_FeatureGroup
    __del__ = lambda self : None;
FeatureGroup_swigregister = _pychrm.FeatureGroup_swigregister
FeatureGroup_swigregister(FeatureGroup)

class FeatureInfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureInfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureInfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.FeatureInfo_name_set
    __swig_getmethods__["name"] = _pychrm.FeatureInfo_name_get
    if _newclass:name = _swig_property(_pychrm.FeatureInfo_name_get, _pychrm.FeatureInfo_name_set)
    __swig_setmethods__["group"] = _pychrm.FeatureInfo_group_set
    __swig_getmethods__["group"] = _pychrm.FeatureInfo_group_get
    if _newclass:group = _swig_property(_pychrm.FeatureInfo_group_get, _pychrm.FeatureInfo_group_set)
    __swig_setmethods__["index"] = _pychrm.FeatureInfo_index_set
    __swig_getmethods__["index"] = _pychrm.FeatureInfo_index_get
    if _newclass:index = _swig_property(_pychrm.FeatureInfo_index_get, _pychrm.FeatureInfo_index_set)
    def __init__(self, *args): 
        this = _pychrm.new_FeatureInfo(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_FeatureInfo
    __del__ = lambda self : None;
FeatureInfo_swigregister = _pychrm.FeatureInfo_swigregister
FeatureInfo_swigregister(FeatureInfo)

class FeatureNames(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureNames, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureNames, name)
    __repr__ = _swig_repr
    __swig_getmethods__["getChannelByName"] = lambda x: _pychrm.FeatureNames_getChannelByName
    if _newclass:getChannelByName = staticmethod(_pychrm.FeatureNames_getChannelByName)
    __swig_getmethods__["getTransformByName"] = lambda x: _pychrm.FeatureNames_getTransformByName
    if _newclass:getTransformByName = staticmethod(_pychrm.FeatureNames_getTransformByName)
    __swig_getmethods__["registerImageTransform"] = lambda x: _pychrm.FeatureNames_registerImageTransform
    if _newclass:registerImageTransform = staticmethod(_pychrm.FeatureNames_registerImageTransform)
    __swig_getmethods__["getFeatureAlgorithmByName"] = lambda x: _pychrm.FeatureNames_getFeatureAlgorithmByName
    if _newclass:getFeatureAlgorithmByName = staticmethod(_pychrm.FeatureNames_getFeatureAlgorithmByName)
    __swig_getmethods__["registerFeatureAlgorithm"] = lambda x: _pychrm.FeatureNames_registerFeatureAlgorithm
    if _newclass:registerFeatureAlgorithm = staticmethod(_pychrm.FeatureNames_registerFeatureAlgorithm)
    __swig_getmethods__["getGroupByName"] = lambda x: _pychrm.FeatureNames_getGroupByName
    if _newclass:getGroupByName = staticmethod(_pychrm.FeatureNames_getGroupByName)
    __swig_getmethods__["getFeatureInfoByName"] = lambda x: _pychrm.FeatureNames_getFeatureInfoByName
    if _newclass:getFeatureInfoByName = staticmethod(_pychrm.FeatureNames_getFeatureInfoByName)
    __swig_getmethods__["oldFeatureNameLookup"] = lambda x: _pychrm.FeatureNames_oldFeatureNameLookup
    if _newclass:oldFeatureNameLookup = staticmethod(_pychrm.FeatureNames_oldFeatureNameLookup)
    __swig_getmethods__["initialized"] = lambda x: _pychrm.FeatureNames_initialized
    if _newclass:initialized = staticmethod(_pychrm.FeatureNames_initialized)
    def __init__(self): 
        this = _pychrm.new_FeatureNames()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_FeatureNames
    __del__ = lambda self : None;
FeatureNames_swigregister = _pychrm.FeatureNames_swigregister
FeatureNames_swigregister(FeatureNames)

def FeatureNames_getChannelByName(*args):
  return _pychrm.FeatureNames_getChannelByName(*args)
FeatureNames_getChannelByName = _pychrm.FeatureNames_getChannelByName

def FeatureNames_getTransformByName(*args):
  return _pychrm.FeatureNames_getTransformByName(*args)
FeatureNames_getTransformByName = _pychrm.FeatureNames_getTransformByName

def FeatureNames_registerImageTransform(*args):
  return _pychrm.FeatureNames_registerImageTransform(*args)
FeatureNames_registerImageTransform = _pychrm.FeatureNames_registerImageTransform

def FeatureNames_getFeatureAlgorithmByName(*args):
  return _pychrm.FeatureNames_getFeatureAlgorithmByName(*args)
FeatureNames_getFeatureAlgorithmByName = _pychrm.FeatureNames_getFeatureAlgorithmByName

def FeatureNames_registerFeatureAlgorithm(*args):
  return _pychrm.FeatureNames_registerFeatureAlgorithm(*args)
FeatureNames_registerFeatureAlgorithm = _pychrm.FeatureNames_registerFeatureAlgorithm

def FeatureNames_getGroupByName(*args):
  return _pychrm.FeatureNames_getGroupByName(*args)
FeatureNames_getGroupByName = _pychrm.FeatureNames_getGroupByName

def FeatureNames_getFeatureInfoByName(*args):
  return _pychrm.FeatureNames_getFeatureInfoByName(*args)
FeatureNames_getFeatureInfoByName = _pychrm.FeatureNames_getFeatureInfoByName

def FeatureNames_oldFeatureNameLookup(*args):
  return _pychrm.FeatureNames_oldFeatureNameLookup(*args)
FeatureNames_oldFeatureNameLookup = _pychrm.FeatureNames_oldFeatureNameLookup

def FeatureNames_initialized():
  return _pychrm.FeatureNames_initialized()
FeatureNames_initialized = _pychrm.FeatureNames_initialized

class FeatureAlgorithm(ComputationTask):
    __swig_setmethods__ = {}
    for _s in [ComputationTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [ComputationTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureAlgorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["n_features"] = _pychrm.FeatureAlgorithm_n_features_set
    __swig_getmethods__["n_features"] = _pychrm.FeatureAlgorithm_n_features_get
    if _newclass:n_features = _swig_property(_pychrm.FeatureAlgorithm_n_features_get, _pychrm.FeatureAlgorithm_n_features_set)
    def execute(self, *args): return _pychrm.FeatureAlgorithm_execute(self, *args)
    def print_info(self): return _pychrm.FeatureAlgorithm_print_info(self)
    def register_task(self): return _pychrm.FeatureAlgorithm_register_task(self)
    __swig_destroy__ = _pychrm.delete_FeatureAlgorithm
    __del__ = lambda self : None;
FeatureAlgorithm_swigregister = _pychrm.FeatureAlgorithm_swigregister
FeatureAlgorithm_swigregister(FeatureAlgorithm)

class EmptyFeatureAlgorithm(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyFeatureAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyFeatureAlgorithm, name)
    __repr__ = _swig_repr
    def execute(self, *args): return _pychrm.EmptyFeatureAlgorithm_execute(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_EmptyFeatureAlgorithm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_EmptyFeatureAlgorithm
    __del__ = lambda self : None;
EmptyFeatureAlgorithm_swigregister = _pychrm.EmptyFeatureAlgorithm_swigregister
EmptyFeatureAlgorithm_swigregister(EmptyFeatureAlgorithm)

class ChebyshevFourierCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevFourierCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevFourierCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevFourierCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ChebyshevFourierCoefficients_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevFourierCoefficients
    __del__ = lambda self : None;
ChebyshevFourierCoefficients_swigregister = _pychrm.ChebyshevFourierCoefficients_swigregister
ChebyshevFourierCoefficients_swigregister(ChebyshevFourierCoefficients)

class ChebyshevCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ChebyshevCoefficients_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevCoefficients
    __del__ = lambda self : None;
ChebyshevCoefficients_swigregister = _pychrm.ChebyshevCoefficients_swigregister
ChebyshevCoefficients_swigregister(ChebyshevCoefficients)

class ZernikeCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZernikeCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZernikeCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ZernikeCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ZernikeCoefficients_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ZernikeCoefficients
    __del__ = lambda self : None;
ZernikeCoefficients_swigregister = _pychrm.ZernikeCoefficients_swigregister
ZernikeCoefficients_swigregister(ZernikeCoefficients)

class HaralickTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaralickTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaralickTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_HaralickTextures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.HaralickTextures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_HaralickTextures
    __del__ = lambda self : None;
HaralickTextures_swigregister = _pychrm.HaralickTextures_swigregister
HaralickTextures_swigregister(HaralickTextures)

class MultiscaleHistograms(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiscaleHistograms, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiscaleHistograms, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_MultiscaleHistograms()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.MultiscaleHistograms_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_MultiscaleHistograms
    __del__ = lambda self : None;
MultiscaleHistograms_swigregister = _pychrm.MultiscaleHistograms_swigregister
MultiscaleHistograms_swigregister(MultiscaleHistograms)

class TamuraTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TamuraTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TamuraTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_TamuraTextures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.TamuraTextures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_TamuraTextures
    __del__ = lambda self : None;
TamuraTextures_swigregister = _pychrm.TamuraTextures_swigregister
TamuraTextures_swigregister(TamuraTextures)

class CombFirstFourMoments(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombFirstFourMoments, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombFirstFourMoments, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_CombFirstFourMoments()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.CombFirstFourMoments_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_CombFirstFourMoments
    __del__ = lambda self : None;
CombFirstFourMoments_swigregister = _pychrm.CombFirstFourMoments_swigregister
CombFirstFourMoments_swigregister(CombFirstFourMoments)

class RadonCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadonCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadonCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_RadonCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.RadonCoefficients_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_RadonCoefficients
    __del__ = lambda self : None;
RadonCoefficients_swigregister = _pychrm.RadonCoefficients_swigregister
RadonCoefficients_swigregister(RadonCoefficients)

class FractalFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FractalFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FractalFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_FractalFeatures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.FractalFeatures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_FractalFeatures
    __del__ = lambda self : None;
FractalFeatures_swigregister = _pychrm.FractalFeatures_swigregister
FractalFeatures_swigregister(FractalFeatures)

class PixelIntensityStatistics(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelIntensityStatistics, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelIntensityStatistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_PixelIntensityStatistics()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.PixelIntensityStatistics_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_PixelIntensityStatistics
    __del__ = lambda self : None;
PixelIntensityStatistics_swigregister = _pychrm.PixelIntensityStatistics_swigregister
PixelIntensityStatistics_swigregister(PixelIntensityStatistics)

class EdgeFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_EdgeFeatures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.EdgeFeatures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_EdgeFeatures
    __del__ = lambda self : None;
EdgeFeatures_swigregister = _pychrm.EdgeFeatures_swigregister
EdgeFeatures_swigregister(EdgeFeatures)

class ObjectFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ObjectFeatures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ObjectFeatures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ObjectFeatures
    __del__ = lambda self : None;
ObjectFeatures_swigregister = _pychrm.ObjectFeatures_swigregister
ObjectFeatures_swigregister(ObjectFeatures)

class InverseObjectFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseObjectFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseObjectFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_InverseObjectFeatures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.InverseObjectFeatures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_InverseObjectFeatures
    __del__ = lambda self : None;
InverseObjectFeatures_swigregister = _pychrm.InverseObjectFeatures_swigregister
InverseObjectFeatures_swigregister(InverseObjectFeatures)

class GaborTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaborTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaborTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_GaborTextures()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.GaborTextures_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_GaborTextures
    __del__ = lambda self : None;
GaborTextures_swigregister = _pychrm.GaborTextures_swigregister
GaborTextures_swigregister(GaborTextures)

class GiniCoefficient(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GiniCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GiniCoefficient, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_GiniCoefficient()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.GiniCoefficient_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_GiniCoefficient
    __del__ = lambda self : None;
GiniCoefficient_swigregister = _pychrm.GiniCoefficient_swigregister
GiniCoefficient_swigregister(GiniCoefficient)

class ColorHistogram(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorHistogram, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ColorHistogram()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ColorHistogram_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ColorHistogram
    __del__ = lambda self : None;
ColorHistogram_swigregister = _pychrm.ColorHistogram_swigregister
ColorHistogram_swigregister(ColorHistogram)

class ImageTransform(ComputationTask):
    __swig_setmethods__ = {}
    for _s in [ComputationTask]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ComputationTask]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ImageTransform, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def execute(self, *args): return _pychrm.ImageTransform_execute(self, *args)
    def register_task(self): return _pychrm.ImageTransform_register_task(self)
    __swig_destroy__ = _pychrm.delete_ImageTransform
    __del__ = lambda self : None;
ImageTransform_swigregister = _pychrm.ImageTransform_swigregister
ImageTransform_swigregister(ImageTransform)

class EmptyTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pychrm.new_EmptyTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.EmptyTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_EmptyTransform
    __del__ = lambda self : None;
EmptyTransform_swigregister = _pychrm.EmptyTransform_swigregister
EmptyTransform_swigregister(EmptyTransform)

class FourierTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FourierTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FourierTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_FourierTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.FourierTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_FourierTransform
    __del__ = lambda self : None;
FourierTransform_swigregister = _pychrm.FourierTransform_swigregister
FourierTransform_swigregister(FourierTransform)

class ChebyshevTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ChebyshevTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevTransform
    __del__ = lambda self : None;
ChebyshevTransform_swigregister = _pychrm.ChebyshevTransform_swigregister
ChebyshevTransform_swigregister(ChebyshevTransform)

class WaveletTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveletTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveletTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_WaveletTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.WaveletTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_WaveletTransform
    __del__ = lambda self : None;
WaveletTransform_swigregister = _pychrm.WaveletTransform_swigregister
WaveletTransform_swigregister(WaveletTransform)

class EdgeTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_EdgeTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.EdgeTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_EdgeTransform
    __del__ = lambda self : None;
EdgeTransform_swigregister = _pychrm.EdgeTransform_swigregister
EdgeTransform_swigregister(EdgeTransform)

class ColorTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ColorTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ColorTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ColorTransform
    __del__ = lambda self : None;
ColorTransform_swigregister = _pychrm.ColorTransform_swigregister
ColorTransform_swigregister(ColorTransform)

class HueTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HueTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HueTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_HueTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.HueTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_HueTransform
    __del__ = lambda self : None;
HueTransform_swigregister = _pychrm.HueTransform_swigregister
HueTransform_swigregister(HueTransform)

# This file is compatible with both classic and new-style classes.


