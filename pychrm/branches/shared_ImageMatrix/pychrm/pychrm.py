# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.6
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pychrm', [dirname(__file__)])
        except ImportError:
            import _pychrm
            return _pychrm
        if fp is not None:
            try:
                _mod = imp.load_module('_pychrm', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pychrm = swig_import_helper()
    del swig_import_helper
else:
    import _pychrm
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


INF = _pychrm.INF
EPSILON = _pychrm.EPSILON
class RGBcolor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RGBcolor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RGBcolor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["r"] = _pychrm.RGBcolor_r_set
    __swig_getmethods__["r"] = _pychrm.RGBcolor_r_get
    if _newclass:r = _swig_property(_pychrm.RGBcolor_r_get, _pychrm.RGBcolor_r_set)
    __swig_setmethods__["g"] = _pychrm.RGBcolor_g_set
    __swig_getmethods__["g"] = _pychrm.RGBcolor_g_get
    if _newclass:g = _swig_property(_pychrm.RGBcolor_g_get, _pychrm.RGBcolor_g_set)
    __swig_setmethods__["b"] = _pychrm.RGBcolor_b_set
    __swig_getmethods__["b"] = _pychrm.RGBcolor_b_get
    if _newclass:b = _swig_property(_pychrm.RGBcolor_b_get, _pychrm.RGBcolor_b_set)
    def __init__(self): 
        this = _pychrm.new_RGBcolor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_RGBcolor
    __del__ = lambda self : None;
RGBcolor_swigregister = _pychrm.RGBcolor_swigregister
RGBcolor_swigregister(RGBcolor)

class HSVcolor(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, HSVcolor, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, HSVcolor, name)
    __repr__ = _swig_repr
    __swig_setmethods__["h"] = _pychrm.HSVcolor_h_set
    __swig_getmethods__["h"] = _pychrm.HSVcolor_h_get
    if _newclass:h = _swig_property(_pychrm.HSVcolor_h_get, _pychrm.HSVcolor_h_set)
    __swig_setmethods__["s"] = _pychrm.HSVcolor_s_set
    __swig_getmethods__["s"] = _pychrm.HSVcolor_s_get
    if _newclass:s = _swig_property(_pychrm.HSVcolor_s_get, _pychrm.HSVcolor_s_set)
    __swig_setmethods__["v"] = _pychrm.HSVcolor_v_set
    __swig_getmethods__["v"] = _pychrm.HSVcolor_v_get
    if _newclass:v = _swig_property(_pychrm.HSVcolor_v_get, _pychrm.HSVcolor_v_set)
    def __init__(self): 
        this = _pychrm.new_HSVcolor()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_HSVcolor
    __del__ = lambda self : None;
HSVcolor_swigregister = _pychrm.HSVcolor_swigregister
HSVcolor_swigregister(HSVcolor)

cmRGB = _pychrm.cmRGB
cmHSV = _pychrm.cmHSV
cmGRAY = _pychrm.cmGRAY
class rect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, rect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, rect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _pychrm.rect_x_set
    __swig_getmethods__["x"] = _pychrm.rect_x_get
    if _newclass:x = _swig_property(_pychrm.rect_x_get, _pychrm.rect_x_set)
    __swig_setmethods__["y"] = _pychrm.rect_y_set
    __swig_getmethods__["y"] = _pychrm.rect_y_get
    if _newclass:y = _swig_property(_pychrm.rect_y_get, _pychrm.rect_y_set)
    __swig_setmethods__["w"] = _pychrm.rect_w_set
    __swig_getmethods__["w"] = _pychrm.rect_w_get
    if _newclass:w = _swig_property(_pychrm.rect_w_get, _pychrm.rect_w_set)
    __swig_setmethods__["h"] = _pychrm.rect_h_set
    __swig_getmethods__["h"] = _pychrm.rect_h_get
    if _newclass:h = _swig_property(_pychrm.rect_h_get, _pychrm.rect_h_set)
    def __init__(self): 
        this = _pychrm.new_rect()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_rect
    __del__ = lambda self : None;
rect_swigregister = _pychrm.rect_swigregister
rect_swigregister(rect)


def compare_doubles(*args):
  return _pychrm.compare_doubles(*args)
compare_doubles = _pychrm.compare_doubles

def RGB2HSV(*args):
  return _pychrm.RGB2HSV(*args)
RGB2HSV = _pychrm.RGB2HSV

def HSV2RGB(*args):
  return _pychrm.HSV2RGB(*args)
HSV2RGB = _pychrm.HSV2RGB

def RGB2GRAY(*args):
  return _pychrm.RGB2GRAY(*args)
RGB2GRAY = _pychrm.RGB2GRAY
class ImageMatrix(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageMatrix, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageMatrix, name)
    __repr__ = _swig_repr
    __swig_setmethods__["source"] = _pychrm.ImageMatrix_source_set
    __swig_getmethods__["source"] = _pychrm.ImageMatrix_source_get
    if _newclass:source = _swig_property(_pychrm.ImageMatrix_source_get, _pychrm.ImageMatrix_source_set)
    __swig_setmethods__["ColorMode"] = _pychrm.ImageMatrix_ColorMode_set
    __swig_getmethods__["ColorMode"] = _pychrm.ImageMatrix_ColorMode_get
    if _newclass:ColorMode = _swig_property(_pychrm.ImageMatrix_ColorMode_get, _pychrm.ImageMatrix_ColorMode_set)
    __swig_setmethods__["bits"] = _pychrm.ImageMatrix_bits_set
    __swig_getmethods__["bits"] = _pychrm.ImageMatrix_bits_get
    if _newclass:bits = _swig_property(_pychrm.ImageMatrix_bits_get, _pychrm.ImageMatrix_bits_set)
    __swig_setmethods__["width"] = _pychrm.ImageMatrix_width_set
    __swig_getmethods__["width"] = _pychrm.ImageMatrix_width_get
    if _newclass:width = _swig_property(_pychrm.ImageMatrix_width_get, _pychrm.ImageMatrix_width_set)
    __swig_setmethods__["height"] = _pychrm.ImageMatrix_height_set
    __swig_getmethods__["height"] = _pychrm.ImageMatrix_height_get
    if _newclass:height = _swig_property(_pychrm.ImageMatrix_height_get, _pychrm.ImageMatrix_height_set)
    __swig_setmethods__["has_stats"] = _pychrm.ImageMatrix_has_stats_set
    __swig_getmethods__["has_stats"] = _pychrm.ImageMatrix_has_stats_get
    if _newclass:has_stats = _swig_property(_pychrm.ImageMatrix_has_stats_get, _pychrm.ImageMatrix_has_stats_set)
    __swig_setmethods__["has_median"] = _pychrm.ImageMatrix_has_median_set
    __swig_getmethods__["has_median"] = _pychrm.ImageMatrix_has_median_get
    if _newclass:has_median = _swig_property(_pychrm.ImageMatrix_has_median_get, _pychrm.ImageMatrix_has_median_set)
    def WriteablePixels(self): return _pychrm.ImageMatrix_WriteablePixels(self)
    def WriteableColors(self): return _pychrm.ImageMatrix_WriteableColors(self)
    def ReadablePixels(self): return _pychrm.ImageMatrix_ReadablePixels(self)
    def ReadableColors(self): return _pychrm.ImageMatrix_ReadableColors(self)
    def ReadOnlyPixels(self): return _pychrm.ImageMatrix_ReadOnlyPixels(self)
    def ReadOnlyColors(self): return _pychrm.ImageMatrix_ReadOnlyColors(self)
    def WriteablePixelsFinish(self): return _pychrm.ImageMatrix_WriteablePixelsFinish(self)
    def WriteableColorsFinish(self): return _pychrm.ImageMatrix_WriteableColorsFinish(self)
    def LoadTIFF(self, *args): return _pychrm.ImageMatrix_LoadTIFF(self, *args)
    def SaveTiff(self, *args): return _pychrm.ImageMatrix_SaveTiff(self, *args)
    def OpenImage(self, *args): return _pychrm.ImageMatrix_OpenImage(self, *args)
    def init(self): return _pychrm.ImageMatrix_init(self)
    def remap_pix_plane(self, *args): return _pychrm.ImageMatrix_remap_pix_plane(self, *args)
    def remap_clr_plane(self, *args): return _pychrm.ImageMatrix_remap_clr_plane(self, *args)
    def allocate(self, *args): return _pychrm.ImageMatrix_allocate(self, *args)
    def copyFields(self, *args): return _pychrm.ImageMatrix_copyFields(self, *args)
    def copyData(self, *args): return _pychrm.ImageMatrix_copyData(self, *args)
    def copy(self, *args): return _pychrm.ImageMatrix_copy(self, *args)
    def submatrix(self, *args): return _pychrm.ImageMatrix_submatrix(self, *args)
    def __init__(self): 
        this = _pychrm.new_ImageMatrix()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_ImageMatrix
    __del__ = lambda self : None;
    def transform(self, *args): return _pychrm.ImageMatrix_transform(self, *args)
    def normalize(self, *args): return _pychrm.ImageMatrix_normalize(self, *args)
    def to8bits(self): return _pychrm.ImageMatrix_to8bits(self)
    def flipV(self): return _pychrm.ImageMatrix_flipV(self)
    def flipH(self): return _pychrm.ImageMatrix_flipH(self)
    def invert(self): return _pychrm.ImageMatrix_invert(self)
    def Downsample(self, *args): return _pychrm.ImageMatrix_Downsample(self, *args)
    def Rotate(self, *args): return _pychrm.ImageMatrix_Rotate(self, *args)
    def convolve(self, *args): return _pychrm.ImageMatrix_convolve(self, *args)
    def BasicStatistics(self, *args): return _pychrm.ImageMatrix_BasicStatistics(self, *args)
    def min(self): return _pychrm.ImageMatrix_min(self)
    def max(self): return _pychrm.ImageMatrix_max(self)
    def mean(self): return _pychrm.ImageMatrix_mean(self)
    def std(self): return _pychrm.ImageMatrix_std(self)
    def median(self): return _pychrm.ImageMatrix_median(self)
    def GetColorStatistics(self, *args): return _pychrm.ImageMatrix_GetColorStatistics(self, *args)
    def ColorTransform(self): return _pychrm.ImageMatrix_ColorTransform(self)
    def HueTransform(self): return _pychrm.ImageMatrix_HueTransform(self)
    def histogram(self, *args): return _pychrm.ImageMatrix_histogram(self, *args)
    def Otsu(self, dynamic_range=1): return _pychrm.ImageMatrix_Otsu(self, dynamic_range)
    def MultiScaleHistogram(self, *args): return _pychrm.ImageMatrix_MultiScaleHistogram(self, *args)
    def EdgeTransform(self): return _pychrm.ImageMatrix_EdgeTransform(self)
    def fft2(self): return _pychrm.ImageMatrix_fft2(self)
    def ChebyshevTransform(self, *args): return _pychrm.ImageMatrix_ChebyshevTransform(self, *args)
    def ChebyshevFourierTransform2D(self, *args): return _pychrm.ImageMatrix_ChebyshevFourierTransform2D(self, *args)
    def Symlet5Transform(self): return _pychrm.ImageMatrix_Symlet5Transform(self)
    def PrewittMagnitude2D(self, *args): return _pychrm.ImageMatrix_PrewittMagnitude2D(self, *args)
    def PrewittDirection2D(self, *args): return _pychrm.ImageMatrix_PrewittDirection2D(self, *args)
    def ChebyshevStatistics2D(self, *args): return _pychrm.ImageMatrix_ChebyshevStatistics2D(self, *args)
    def CombFirstFourMoments2D(self, *args): return _pychrm.ImageMatrix_CombFirstFourMoments2D(self, *args)
    def EdgeStatistics(self, *args): return _pychrm.ImageMatrix_EdgeStatistics(self, *args)
    def RadonTransform2D(self, *args): return _pychrm.ImageMatrix_RadonTransform2D(self, *args)
    def OtsuBinaryMaskTransform(self): return _pychrm.ImageMatrix_OtsuBinaryMaskTransform(self)
    def BWlabel(self, *args): return _pychrm.ImageMatrix_BWlabel(self, *args)
    def centroid(self, *args): return _pychrm.ImageMatrix_centroid(self, *args)
    def FeatureStatistics(self, *args): return _pychrm.ImageMatrix_FeatureStatistics(self, *args)
    def GaborFilters2D(self, *args): return _pychrm.ImageMatrix_GaborFilters2D(self, *args)
    def HaralickTexture2D(self, *args): return _pychrm.ImageMatrix_HaralickTexture2D(self, *args)
    def TamuraTexture2D(self, *args): return _pychrm.ImageMatrix_TamuraTexture2D(self, *args)
    def zernike2D(self, *args): return _pychrm.ImageMatrix_zernike2D(self, *args)
    def fractal2D(self, *args): return _pychrm.ImageMatrix_fractal2D(self, *args)
ImageMatrix_swigregister = _pychrm.ImageMatrix_swigregister
ImageMatrix_swigregister(ImageMatrix)

class SharedImageMatrix(ImageMatrix):
    __swig_setmethods__ = {}
    for _s in [ImageMatrix]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SharedImageMatrix, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageMatrix]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SharedImageMatrix, name)
    __repr__ = _swig_repr
    csUNKNOWN = _pychrm.SharedImageMatrix_csUNKNOWN
    csREAD = _pychrm.SharedImageMatrix_csREAD
    csWRITE = _pychrm.SharedImageMatrix_csWRITE
    csWAIT = _pychrm.SharedImageMatrix_csWAIT
    csERROR = _pychrm.SharedImageMatrix_csERROR
    def __init__(self): 
        this = _pychrm.new_SharedImageMatrix()
        try: self.this.append(this)
        except: self.this = this
    def fromCache(self, *args): return _pychrm.SharedImageMatrix_fromCache(self, *args)
    def Cache(self): return _pychrm.SharedImageMatrix_Cache(self)
    def Error(self): return _pychrm.SharedImageMatrix_Error(self)
    def Status(self): return _pychrm.SharedImageMatrix_Status(self)
    def GetShmemName(self): return _pychrm.SharedImageMatrix_GetShmemName(self)
    __swig_getmethods__["DisableCacheRead"] = lambda x: _pychrm.SharedImageMatrix_DisableCacheRead
    if _newclass:DisableCacheRead = staticmethod(_pychrm.SharedImageMatrix_DisableCacheRead)
    __swig_getmethods__["DisableDestructorCacheCleanup"] = lambda x: _pychrm.SharedImageMatrix_DisableDestructorCacheCleanup
    if _newclass:DisableDestructorCacheCleanup = staticmethod(_pychrm.SharedImageMatrix_DisableDestructorCacheCleanup)
    def allocate(self, *args): return _pychrm.SharedImageMatrix_allocate(self, *args)
    def OpenImage(self, *args): return _pychrm.SharedImageMatrix_OpenImage(self, *args)
    def transform(self, *args): return _pychrm.SharedImageMatrix_transform(self, *args)
    __swig_destroy__ = _pychrm.delete_SharedImageMatrix
    __del__ = lambda self : None;
SharedImageMatrix_swigregister = _pychrm.SharedImageMatrix_swigregister
SharedImageMatrix_swigregister(SharedImageMatrix)

def SharedImageMatrix_DisableCacheRead(*args):
  return _pychrm.SharedImageMatrix_DisableCacheRead(*args)
SharedImageMatrix_DisableCacheRead = _pychrm.SharedImageMatrix_DisableCacheRead

def SharedImageMatrix_DisableDestructorCacheCleanup(*args):
  return _pychrm.SharedImageMatrix_DisableDestructorCacheCleanup(*args)
SharedImageMatrix_DisableDestructorCacheCleanup = _pychrm.SharedImageMatrix_DisableDestructorCacheCleanup

WC_UNINITIALIZED = _pychrm.WC_UNINITIALIZED
WC_NO_ERROR = _pychrm.WC_NO_ERROR
WC_IPP_NULL = _pychrm.WC_IPP_NULL
WC_MM_FAIL_RECURSIVE_CALL = _pychrm.WC_MM_FAIL_RECURSIVE_CALL
WC_TRANSFORM_FAIL = _pychrm.WC_TRANSFORM_FAIL
WC_EMPTY = _pychrm.WC_EMPTY
WC_NOT_IMPLEMENTED = _pychrm.WC_NOT_IMPLEMENTED
WC_INPUT_IMAGEMATRIX_NULL = _pychrm.WC_INPUT_IMAGEMATRIX_NULL

def catError(*args):
  return _pychrm.catError(*args)
catError = _pychrm.catError

def showError(*args):
  return _pychrm.showError(*args)
showError = _pychrm.showError

def getErrorString():
  return _pychrm.getErrorString()
getErrorString = _pychrm.getErrorString

def translateError(*args):
  return _pychrm.translateError(*args)
translateError = _pychrm.translateError
class SwigPyIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _pychrm.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self): return _pychrm.SwigPyIterator_value(self)
    def incr(self, n=1): return _pychrm.SwigPyIterator_incr(self, n)
    def decr(self, n=1): return _pychrm.SwigPyIterator_decr(self, n)
    def distance(self, *args): return _pychrm.SwigPyIterator_distance(self, *args)
    def equal(self, *args): return _pychrm.SwigPyIterator_equal(self, *args)
    def copy(self): return _pychrm.SwigPyIterator_copy(self)
    def next(self): return _pychrm.SwigPyIterator_next(self)
    def __next__(self): return _pychrm.SwigPyIterator___next__(self)
    def previous(self): return _pychrm.SwigPyIterator_previous(self)
    def advance(self, *args): return _pychrm.SwigPyIterator_advance(self, *args)
    def __eq__(self, *args): return _pychrm.SwigPyIterator___eq__(self, *args)
    def __ne__(self, *args): return _pychrm.SwigPyIterator___ne__(self, *args)
    def __iadd__(self, *args): return _pychrm.SwigPyIterator___iadd__(self, *args)
    def __isub__(self, *args): return _pychrm.SwigPyIterator___isub__(self, *args)
    def __add__(self, *args): return _pychrm.SwigPyIterator___add__(self, *args)
    def __sub__(self, *args): return _pychrm.SwigPyIterator___sub__(self, *args)
    def __iter__(self): return self
SwigPyIterator_swigregister = _pychrm.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class DoubleVector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DoubleVector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DoubleVector, name)
    __repr__ = _swig_repr
    def iterator(self): return _pychrm.DoubleVector_iterator(self)
    def __iter__(self): return self.iterator()
    def __nonzero__(self): return _pychrm.DoubleVector___nonzero__(self)
    def __bool__(self): return _pychrm.DoubleVector___bool__(self)
    def __len__(self): return _pychrm.DoubleVector___len__(self)
    def pop(self): return _pychrm.DoubleVector_pop(self)
    def __getslice__(self, *args): return _pychrm.DoubleVector___getslice__(self, *args)
    def __setslice__(self, *args): return _pychrm.DoubleVector___setslice__(self, *args)
    def __delslice__(self, *args): return _pychrm.DoubleVector___delslice__(self, *args)
    def __delitem__(self, *args): return _pychrm.DoubleVector___delitem__(self, *args)
    def __getitem__(self, *args): return _pychrm.DoubleVector___getitem__(self, *args)
    def __setitem__(self, *args): return _pychrm.DoubleVector___setitem__(self, *args)
    def append(self, *args): return _pychrm.DoubleVector_append(self, *args)
    def empty(self): return _pychrm.DoubleVector_empty(self)
    def size(self): return _pychrm.DoubleVector_size(self)
    def clear(self): return _pychrm.DoubleVector_clear(self)
    def swap(self, *args): return _pychrm.DoubleVector_swap(self, *args)
    def get_allocator(self): return _pychrm.DoubleVector_get_allocator(self)
    def begin(self): return _pychrm.DoubleVector_begin(self)
    def end(self): return _pychrm.DoubleVector_end(self)
    def rbegin(self): return _pychrm.DoubleVector_rbegin(self)
    def rend(self): return _pychrm.DoubleVector_rend(self)
    def pop_back(self): return _pychrm.DoubleVector_pop_back(self)
    def erase(self, *args): return _pychrm.DoubleVector_erase(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_DoubleVector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args): return _pychrm.DoubleVector_push_back(self, *args)
    def front(self): return _pychrm.DoubleVector_front(self)
    def back(self): return _pychrm.DoubleVector_back(self)
    def assign(self, *args): return _pychrm.DoubleVector_assign(self, *args)
    def resize(self, *args): return _pychrm.DoubleVector_resize(self, *args)
    def insert(self, *args): return _pychrm.DoubleVector_insert(self, *args)
    def reserve(self, *args): return _pychrm.DoubleVector_reserve(self, *args)
    def capacity(self): return _pychrm.DoubleVector_capacity(self)
    __swig_destroy__ = _pychrm.delete_DoubleVector
    __del__ = lambda self : None;
DoubleVector_swigregister = _pychrm.DoubleVector_swigregister
DoubleVector_swigregister(DoubleVector)

class FeatureAlgorithm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, FeatureAlgorithm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, FeatureAlgorithm, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.FeatureAlgorithm_name_set
    __swig_getmethods__["name"] = _pychrm.FeatureAlgorithm_name_get
    if _newclass:name = _swig_property(_pychrm.FeatureAlgorithm_name_get, _pychrm.FeatureAlgorithm_name_set)
    __swig_setmethods__["n_features"] = _pychrm.FeatureAlgorithm_n_features_set
    __swig_getmethods__["n_features"] = _pychrm.FeatureAlgorithm_n_features_get
    if _newclass:n_features = _swig_property(_pychrm.FeatureAlgorithm_n_features_get, _pychrm.FeatureAlgorithm_n_features_set)
    def calculate(self, *args): return _pychrm.FeatureAlgorithm_calculate(self, *args)
    def print_info(self): return _pychrm.FeatureAlgorithm_print_info(self)
    __swig_destroy__ = _pychrm.delete_FeatureAlgorithm
    __del__ = lambda self : None;
FeatureAlgorithm_swigregister = _pychrm.FeatureAlgorithm_swigregister
FeatureAlgorithm_swigregister(FeatureAlgorithm)

class EmptyFeatureAlgorithm(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyFeatureAlgorithm, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyFeatureAlgorithm, name)
    __repr__ = _swig_repr
    def calculate(self, *args): return _pychrm.EmptyFeatureAlgorithm_calculate(self, *args)
    def __init__(self, *args): 
        this = _pychrm.new_EmptyFeatureAlgorithm(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _pychrm.delete_EmptyFeatureAlgorithm
    __del__ = lambda self : None;
EmptyFeatureAlgorithm_swigregister = _pychrm.EmptyFeatureAlgorithm_swigregister
EmptyFeatureAlgorithm_swigregister(EmptyFeatureAlgorithm)

class ChebyshevFourierCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevFourierCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevFourierCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevFourierCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.ChebyshevFourierCoefficients_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevFourierCoefficients
    __del__ = lambda self : None;
ChebyshevFourierCoefficients_swigregister = _pychrm.ChebyshevFourierCoefficients_swigregister
ChebyshevFourierCoefficients_swigregister(ChebyshevFourierCoefficients)

class ChebyshevCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.ChebyshevCoefficients_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevCoefficients
    __del__ = lambda self : None;
ChebyshevCoefficients_swigregister = _pychrm.ChebyshevCoefficients_swigregister
ChebyshevCoefficients_swigregister(ChebyshevCoefficients)

class ZernikeCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ZernikeCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ZernikeCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ZernikeCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.ZernikeCoefficients_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_ZernikeCoefficients
    __del__ = lambda self : None;
ZernikeCoefficients_swigregister = _pychrm.ZernikeCoefficients_swigregister
ZernikeCoefficients_swigregister(ZernikeCoefficients)

class HaralickTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HaralickTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HaralickTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_HaralickTextures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.HaralickTextures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_HaralickTextures
    __del__ = lambda self : None;
HaralickTextures_swigregister = _pychrm.HaralickTextures_swigregister
HaralickTextures_swigregister(HaralickTextures)

class MultiscaleHistograms(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MultiscaleHistograms, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MultiscaleHistograms, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_MultiscaleHistograms()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.MultiscaleHistograms_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_MultiscaleHistograms
    __del__ = lambda self : None;
MultiscaleHistograms_swigregister = _pychrm.MultiscaleHistograms_swigregister
MultiscaleHistograms_swigregister(MultiscaleHistograms)

class TamuraTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TamuraTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TamuraTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_TamuraTextures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.TamuraTextures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_TamuraTextures
    __del__ = lambda self : None;
TamuraTextures_swigregister = _pychrm.TamuraTextures_swigregister
TamuraTextures_swigregister(TamuraTextures)

class CombFirstFourMoments(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CombFirstFourMoments, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CombFirstFourMoments, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_CombFirstFourMoments()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.CombFirstFourMoments_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_CombFirstFourMoments
    __del__ = lambda self : None;
CombFirstFourMoments_swigregister = _pychrm.CombFirstFourMoments_swigregister
CombFirstFourMoments_swigregister(CombFirstFourMoments)

class RadonCoefficients(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RadonCoefficients, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RadonCoefficients, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_RadonCoefficients()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.RadonCoefficients_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_RadonCoefficients
    __del__ = lambda self : None;
RadonCoefficients_swigregister = _pychrm.RadonCoefficients_swigregister
RadonCoefficients_swigregister(RadonCoefficients)

class FractalFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FractalFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FractalFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_FractalFeatures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.FractalFeatures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_FractalFeatures
    __del__ = lambda self : None;
FractalFeatures_swigregister = _pychrm.FractalFeatures_swigregister
FractalFeatures_swigregister(FractalFeatures)

class PixelIntensityStatistics(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PixelIntensityStatistics, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PixelIntensityStatistics, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_PixelIntensityStatistics()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.PixelIntensityStatistics_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_PixelIntensityStatistics
    __del__ = lambda self : None;
PixelIntensityStatistics_swigregister = _pychrm.PixelIntensityStatistics_swigregister
PixelIntensityStatistics_swigregister(PixelIntensityStatistics)

class EdgeFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_EdgeFeatures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.EdgeFeatures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_EdgeFeatures
    __del__ = lambda self : None;
EdgeFeatures_swigregister = _pychrm.EdgeFeatures_swigregister
EdgeFeatures_swigregister(EdgeFeatures)

class ObjectFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ObjectFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ObjectFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ObjectFeatures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.ObjectFeatures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_ObjectFeatures
    __del__ = lambda self : None;
ObjectFeatures_swigregister = _pychrm.ObjectFeatures_swigregister
ObjectFeatures_swigregister(ObjectFeatures)

class InverseObjectFeatures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InverseObjectFeatures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InverseObjectFeatures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_InverseObjectFeatures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.InverseObjectFeatures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_InverseObjectFeatures
    __del__ = lambda self : None;
InverseObjectFeatures_swigregister = _pychrm.InverseObjectFeatures_swigregister
InverseObjectFeatures_swigregister(InverseObjectFeatures)

class GaborTextures(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GaborTextures, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GaborTextures, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_GaborTextures()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.GaborTextures_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_GaborTextures
    __del__ = lambda self : None;
GaborTextures_swigregister = _pychrm.GaborTextures_swigregister
GaborTextures_swigregister(GaborTextures)

class GiniCoefficient(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GiniCoefficient, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GiniCoefficient, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_GiniCoefficient()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.GiniCoefficient_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_GiniCoefficient
    __del__ = lambda self : None;
GiniCoefficient_swigregister = _pychrm.GiniCoefficient_swigregister
GiniCoefficient_swigregister(GiniCoefficient)

class ColorHistogram(FeatureAlgorithm):
    __swig_setmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorHistogram, name, value)
    __swig_getmethods__ = {}
    for _s in [FeatureAlgorithm]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorHistogram, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ColorHistogram()
        try: self.this.append(this)
        except: self.this = this
    def calculate(self, *args): return _pychrm.ColorHistogram_calculate(self, *args)
    __swig_destroy__ = _pychrm.delete_ColorHistogram
    __del__ = lambda self : None;
ColorHistogram_swigregister = _pychrm.ColorHistogram_swigregister
ColorHistogram_swigregister(ColorHistogram)

class ImageTransform(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ImageTransform, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ImageTransform, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_setmethods__["name"] = _pychrm.ImageTransform_name_set
    __swig_getmethods__["name"] = _pychrm.ImageTransform_name_get
    if _newclass:name = _swig_property(_pychrm.ImageTransform_name_get, _pychrm.ImageTransform_name_set)
    def execute(self, *args): return _pychrm.ImageTransform_execute(self, *args)
    def print_info(self): return _pychrm.ImageTransform_print_info(self)
    __swig_destroy__ = _pychrm.delete_ImageTransform
    __del__ = lambda self : None;
ImageTransform_swigregister = _pychrm.ImageTransform_swigregister
ImageTransform_swigregister(ImageTransform)

class EmptyTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EmptyTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EmptyTransform, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _pychrm.new_EmptyTransform(*args)
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.EmptyTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_EmptyTransform
    __del__ = lambda self : None;
EmptyTransform_swigregister = _pychrm.EmptyTransform_swigregister
EmptyTransform_swigregister(EmptyTransform)

class FourierTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, FourierTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, FourierTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_FourierTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.FourierTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_FourierTransform
    __del__ = lambda self : None;
FourierTransform_swigregister = _pychrm.FourierTransform_swigregister
FourierTransform_swigregister(FourierTransform)

class ChebyshevTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ChebyshevTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ChebyshevTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ChebyshevTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ChebyshevTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ChebyshevTransform
    __del__ = lambda self : None;
ChebyshevTransform_swigregister = _pychrm.ChebyshevTransform_swigregister
ChebyshevTransform_swigregister(ChebyshevTransform)

class WaveletTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, WaveletTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, WaveletTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_WaveletTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.WaveletTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_WaveletTransform
    __del__ = lambda self : None;
WaveletTransform_swigregister = _pychrm.WaveletTransform_swigregister
WaveletTransform_swigregister(WaveletTransform)

class EdgeTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, EdgeTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, EdgeTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_EdgeTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.EdgeTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_EdgeTransform
    __del__ = lambda self : None;
EdgeTransform_swigregister = _pychrm.EdgeTransform_swigregister
EdgeTransform_swigregister(EdgeTransform)

class ColorTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, ColorTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, ColorTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_ColorTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.ColorTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_ColorTransform
    __del__ = lambda self : None;
ColorTransform_swigregister = _pychrm.ColorTransform_swigregister
ColorTransform_swigregister(ColorTransform)

class HueTransform(ImageTransform):
    __swig_setmethods__ = {}
    for _s in [ImageTransform]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, HueTransform, name, value)
    __swig_getmethods__ = {}
    for _s in [ImageTransform]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, HueTransform, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _pychrm.new_HueTransform()
        try: self.this.append(this)
        except: self.this = this
    def execute(self, *args): return _pychrm.HueTransform_execute(self, *args)
    __swig_destroy__ = _pychrm.delete_HueTransform
    __del__ = lambda self : None;
HueTransform_swigregister = _pychrm.HueTransform_swigregister
HueTransform_swigregister(HueTransform)

# This file is compatible with both classic and new-style classes.


